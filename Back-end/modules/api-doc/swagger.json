{
  "openapi": "3.0.0",
  "info": {
    "title": "< Cyber-chic - Shop APIS üíö >",
    "description": "",
    "version": "1.0.0"
  },

  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "User token for authentication: **Bearer [user_token]**"
      }
    }
  },

  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["Auth üîê"],
        "summary": "For User Register",
        "description": "Default OTP: 1111",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "mehranKhodaei"
                  },
                  "phone": {
                    "type": "string",
                    "example": "09123334444"
                  },
                  "password": {
                    "type": "string",
                    "example": "12345678"
                  },
                  "confirmPassword": {
                    "type": "string",
                    "example": "12345678"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success Register User"
          },
          "403": {
            "description": "Username Already exist"
          },
          "401": {
            "description": "phone Number Blocked"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Auth üîê"],
        "summary": "For User Login",
        "description": "For User Login with username and paassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "mehran"
                  },
                  "password": {
                    "type": "string",
                    "example": "12345678"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "user logged in successfully"
          },
          "401": {
            "description": "Invalid Data (Username Or Password)"
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "tags": ["Auth üîê"],
        "summary": "Get user's data with token",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "user data will be returned"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "The user has already been banned(Blocked)"
          }
        }
      }
    },

    "/category/": {
      "get": {
        "tags": ["Category üìÅ"],
        "summary": "Fetch Categories (Get all Categories and Sub Categories)",
        "description": "",
        "responses": {
          "200": {
            "description": "All categories will be returned"
          }
        }
      },
      "post": {
        "tags": ["Category üìÅ"],
        "summary": "Create a new category",
        "description": "",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Title Text"
                  },
                  "href": {
                    "type": "string",
                    "example": "title-href-text"
                  },
                  "parent": {
                    "type": "objectId",
                    "example": "66793a5bbb4dd75a84f0bae7",
                    "required": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category created"
          },
          "400": {
            "description": "Req Body Validation Err"
          },
          "401": {
            "description": "Admin Token is not valid"
          },
          "403": {
            "description": "category is already exist"
          }
        }
      }
    },

    "/category/{categoryId}": {
      "put": {
        "tags": ["Category üìÅ"],
        "summary": "Edit a category",
        "description": "",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "example": "Title Text"
                  },
                  "href": {
                    "example": "title-href-text"
                  },
                  "parent": {
                    "example": "parentCategoryId"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edited successfully"
          },
          "400": {
            "description": "one of the parameters is not valid"
          },
          "401": {
            "description": "Admin Token is not valid"
          },
          "404": {
            "description": "Category not found"
          }
        }
      },
      "delete": {
        "tags": ["Category üìÅ"],
        "summary": "Remove a category",
        "description": "",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "401": {
            "description": "Admin Token is not valid"
          },
          "404": {
            "description": "Category not found"
          }
        }
      }
    },

    "/category/sub": {
      "get": {
        "tags": ["Sub Category üìÇ"],
        "summary": "Get all sub categories",
        "description": "",
        "responses": {
          "200": {
            "description": "All sub categories will be returned"
          },
          "404": {
            "description": "Sub Categories Not Found!!"
          }
        }
      },
      "post": {
        "tags": ["Sub Category üìÇ"],
        "summary": "Create a sub category",
        "description": "",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "example": "Title Text"
                  },
                  "href": {
                    "example": "title-href-text"
                  },
                  "parent": {
                    "example": "parent CategoryId"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SubCategory created"
          },
          "400": {
            "description": "one of the parameters is not valid"
          },
          "401": {
            "description": "Admin Token is not valid"
          }
        }
      }
    },

    "/category/sub/{categoryId}": {
      "get": {
        "tags": ["Sub Category üìÇ"],
        "summary": "Get a sub category",
        "description": "",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SubCategory will be returned"
          },
          "400": {
            "description": "Category ID is not correct !!"
          },
          "404": {
            "description": "SubCategory not found"
          }
        }
      },
      "delete": {
        "tags": ["Sub Category üìÇ"],
        "summary": "Remove a sub category",
        "description": "",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Category ID is not correct !!"
          },
          "401": {
            "description": "Admin Token is not valid"
          },
          "404": {
            "description": "SubCategory not found"
          }
        }
      }
    },

    "/locations/": {
      "get": {
        "tags": ["Location üó∫"],
        "summary": "Get all locations",
        "description": "",
        "responses": {
          "200": {
            "description": "cities, provinces, and neighborhoods will be returned"
          }
        }
      }
    },

    "/api/v1/products/{id}": {
      "get": {
        "tags": ["Products üì¶"],
        "summary": "get one product",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "specfied product will be returned"
          },
          "400": {
            "description": "Product ID is not correct !!"
          },
          "404": {
            "description": "Product not found !!"
          }
        }
      },
      "delete": {
        "tags": ["Products üì¶"],
        "summary": "delete product",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "deleted product will be returned"
          },
          "400": {
            "description": "Product ID is not correct !!"
          },
          "401": {
            "description": "Admin Token is not valid"
          },
          "404": {
            "description": "Product not found !!"
          }
        }
      }
    },

    "/users/me/addresses": {
      "post": {
        "tags": ["Users üë§"],
        "summary": "add address",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "postalCode": {
                    "type": "string"
                  },
                  "coordinates": {
                    "type": "object",
                    "properties": {
                      "lat": {
                        "type": "number"
                      },
                      "lng": {
                        "type": "number"
                      }
                    }
                  },
                  "cityId": {
                    "type": "number"
                  },
                  "provinceId": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "updated user containing addresses will be returned"
          },
          "409": {
            "description": "Province Or City is Not Valid"
          }
        }
      }
    },
    "/users/me/addresses/{addressId}": {
      "delete": {
        "tags": ["Users üë§"],
        "summary": "delete address",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated user with addresses will be returned"
          },
          "404": {
            "description": "Address Not Found!!"
          }
        }
      }
    },

    "/users/ban/{userId}": {
      "post": {
        "tags": ["Admin Dashboard üìà"],
        "summary": "Ban user and remove his/her account",
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User banned successfully"
          },
          "401": {
            "description": "Admin Token is not valid"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  }
}
